package org.diiage.projet_rattrapage.domain.usecase

import org.diiage.projet_rattrapage.domain.model.Artist
import org.diiage.projet_rattrapage.domain.model.Album
import org.diiage.projet_rattrapage.domain.model.Track
import org.diiage.projet_rattrapage.domain.repository.MusicRepository
import timber.log.Timber


/**
 * Mod√®le de donn√©es agr√©g√©es pour les d√©tails d'un artiste
 * 
 * Cette classe applique le principe de composition en regroupant
 * toutes les informations li√©es √† un artiste en une seule structure
 * 
 * @property artist Informations de base de l'artiste
 * @property albums Liste des albums de l'artiste
 * @property topTracks Pistes les plus populaires de l'artiste
 */
data class ArtistDetails(
    val artist: Artist,
    val albums: List<Album> = emptyList(),
    val topTracks: List<Track> = emptyList()
) {
    /**
     * Indique si l'artiste a du contenu disponible
     * 
     * @return true si l'artiste a au moins un album ou une piste
     */
    fun hasContent(): Boolean = albums.isNotEmpty() || topTracks.isNotEmpty()
    
    /**
     * Retourne le nombre total de contenus
     * 
     * @return Nombre d'albums + nombre de pistes
     */
    fun getTotalContentCount(): Int = albums.size + topTracks.size
}

/**
 * Use Case pour r√©cup√©rer les d√©tails complets d'un artiste
 * 
 * Cette classe illustre le pattern Facade en coordonnant
 * plusieurs appels d'API pour construire une vue compl√®te d'un artiste
 * 
 * Strat√©gie de r√©cup√©ration :
 * - R√©cup√©ration parall√®le des albums et pistes pour optimiser les performances
 * - Gestion gracieuse des √©checs partiels
 * - Agr√©gation des donn√©es en un seul mod√®le coh√©rent
 * 
 * @property repository Repository pour l'acc√®s aux donn√©es
 * 

 * @since 1.0
 */
class GetArtistDetailsUseCase(
    private val repository: MusicRepository
) {
    
    /**
     * R√©cup√®re les d√©tails complets d'un artiste
     * 
     * Cette m√©thode orchestre plusieurs appels asynchrones :
     * 1. R√©cup√©ration des informations de base de l'artiste
     * 2. R√©cup√©ration parall√®le des albums et pistes populaires
     * 3. Agr√©gation des r√©sultats en un mod√®le unifi√©
     * 
     * @param artistId Identifiant de l'artiste
     * @return Result contenant les d√©tails de l'artiste ou une erreur
     */
    suspend operator fun invoke(artistId: Long): Result<ArtistDetails> {
        Timber.d("üé§ R√©cup√©ration des d√©tails pour l'artiste ID: $artistId")
        
        // ================================
        // VALIDATION DES PARAM√àTRES
        // ================================
        
        if (artistId <= 0) {
            Timber.w("‚ö†Ô∏è ID d'artiste invalide: $artistId")
            return Result.failure(
                IllegalArgumentException("L'ID de l'artiste doit √™tre positif")
            )
        }
        
        return try {
            // ================================
            // R√âCUP√âRATION DES INFORMATIONS DE BASE
            // ================================
            
            val artistResult = repository.getArtistById(artistId)
            
            artistResult.fold(
                onSuccess = { artist ->
                    Timber.d("‚úÖ Artiste r√©cup√©r√©: ${artist.name}")
                    
                    // ================================
                    // R√âCUP√âRATION PARALL√àLE DES CONTENUS
                    // ================================
                    
                    val albumsResult = repository.getArtistAlbums(artistId)
                    val tracksResult = repository.getArtistTopTracks(artistId)
                    
                    // Gestion gracieuse des √©checs partiels
                    val albums = albumsResult.getOrElse { exception ->
                        Timber.w(exception, "‚ö†Ô∏è Impossible de r√©cup√©rer les albums de ${artist.name}")
                        emptyList()
                    }
                    
                    val topTracks = tracksResult.getOrElse { exception ->
                        Timber.w(exception, "‚ö†Ô∏è Impossible de r√©cup√©rer les pistes de ${artist.name}")
                        emptyList()
                    }
                    
                    // ================================
                    // CONSTRUCTION DU R√âSULTAT
                    // ================================
                    
                    val artistDetails = ArtistDetails(
                        artist = artist,
                        albums = albums,
                        topTracks = topTracks
                    )
                    
                    Timber.i(
                        "üéµ D√©tails complets r√©cup√©r√©s pour ${artist.name}: " +
                        "${albums.size} album(s), ${topTracks.size} piste(s) populaire(s)"
                    )
                    
                    Result.success(artistDetails)
                },
                onFailure = { error ->
                    Timber.e(error, "‚ùå Erreur lors de la r√©cup√©ration de l'artiste $artistId")
                    Result.failure(error)
                }
            )
            
        } catch (exception: Exception) {
            Timber.e(exception, "üí• Exception inattendue lors de la r√©cup√©ration des d√©tails")
            Result.failure(exception)
        }
    }
    
    /**
     * R√©cup√®re uniquement les informations de base d'un artiste
     * 
     * M√©thode plus l√©g√®re quand on n'a pas besoin des albums/pistes
     * 
     * @param artistId Identifiant de l'artiste
     * @return Result contenant l'artiste ou une erreur
     */
    suspend fun getBasicInfo(artistId: Long): Result<Artist> {
        Timber.d("‚ÑπÔ∏è R√©cup√©ration des infos de base pour l'artiste ID: $artistId")
        
        return repository.getArtistById(artistId)
    }
} 