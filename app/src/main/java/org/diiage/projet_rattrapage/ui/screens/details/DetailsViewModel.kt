package org.diiage.projet_rattrapage.ui.screens.details

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import org.diiage.projet_rattrapage.domain.usecase.GetArtistDetailsUseCase
import org.diiage.projet_rattrapage.domain.repository.MusicRepository
import org.diiage.projet_rattrapage.data.hardware.AudioPlayer
import timber.log.Timber

/**
 * ViewModel pour l'√©cran de d√©tails d'√©l√©ments musicaux
 * 
 * Cette classe applique l'architecture MVVM+ avec flux de donn√©es unidirectionnel (UDF) :
 * - S√©paration claire entre UI et logique business
 * - Gestion d'√©tat centralis√©e via StateFlow
 * - Int√©gration avec la couche Domain via Use Cases
 * - Logging complet pour debugging et monitoring
 * 
 * Design Patterns appliqu√©s :
 * - Observer Pattern : StateFlow pour la r√©activit√© UI
 * - Command Pattern : Actions via m√©thodes publiques
 * - Facade Pattern : Interface simplifi√©e pour l'UI
 * - Dependency Injection : Use Cases inject√©s
 * 
 * Comp√©tences mises en ≈ìuvre :
 * - CRIT-DMA-D1-S-3 : Architecture MVVM+ UDF
 * - CRIT-DMA-D1-SE-3 : StateFlow bien form√©s
 * - DI1-GLO-C6-2 : Design patterns respectant SOLID
 * - DI1-GLO-C2-3 : Bonnes pratiques de d√©veloppement
 * 
 * @param getArtistDetailsUseCase Use case pour r√©cup√©rer les d√©tails d'artiste
 * @param musicRepository Repository pour l'acc√®s direct aux donn√©es musicales
 * 

 * @since 1.0
 */
class DetailsViewModel(
    private val getArtistDetailsUseCase: GetArtistDetailsUseCase,
    private val musicRepository: MusicRepository,
    audioPlayer: AudioPlayer
) : ViewModel() {
    
    /**
     * Lecteur audio pour les extraits de pistes
     */
    val audioPlayerInstance: AudioPlayer = audioPlayer
    
    // ================================
    // √âTAT PRIV√â ET PUBLIC
    // ================================
    
    /**
     * √âtat interne mutable de l'interface utilisateur
     * 
     * Encapsulation : acc√®s en √©criture limit√© au ViewModel
     * selon le principe d'encapsulation de la POO
     */
    private val _uiState = MutableStateFlow(DetailsUiState())
    
    /**
     * √âtat public en lecture seule pour l'UI
     * 
     * Applique le principe de l'interface segregation (SOLID)
     * en exposant uniquement les capacit√©s de lecture
     */
    val uiState: StateFlow<DetailsUiState> = _uiState.asStateFlow()
    

    
    // ================================
    // ACTIONS PUBLIQUES
    // ================================
    
    /**
     * Charge les d√©tails d'un √©l√©ment selon son type
     * 
     * Cette m√©thode applique le pattern Strategy en s√©lectionnant
     * la logique de chargement appropri√©e selon le type
     * 
     * @param detailsType Type d'√©l√©ment √† charger (ARTIST, ALBUM, TRACK)
     * @param itemId Identifiant de l'√©l√©ment
     */
    fun loadDetails(detailsType: DetailsType, itemId: Long) {
        Timber.d("üéØ Chargement des d√©tails - Type: $detailsType, ID: $itemId")
        
        if (itemId <= 0) {
            Timber.w("‚ö†Ô∏è ID invalide pour le chargement: $itemId")
            _uiState.value = DetailsUiState.error("Identifiant invalide")
            return
        }
        
        viewModelScope.launch {
            try {
                _uiState.value = DetailsUiState.loading()
                
                when (detailsType) {
                    DetailsType.ARTIST -> loadArtistDetails(itemId)
                    DetailsType.ALBUM -> loadAlbumDetails(itemId)
                    DetailsType.TRACK -> loadTrackDetails(itemId)
                }
                
            } catch (exception: Exception) {
                Timber.e(exception, "üí• Erreur lors du chargement des d√©tails")
                handleError(exception)
            }
        }
    }
    

    
    // ================================
    // M√âTHODES PRIV√âES DE CHARGEMENT
    // ================================
    
    /**
     * Charge les d√©tails d'un artiste
     * 
     * Utilise le Use Case d√©di√© pour respecter l'architecture en couches
     * 
     * @param artistId Identifiant de l'artiste
     */
    private suspend fun loadArtistDetails(artistId: Long) {
        Timber.d("üé§ Chargement des d√©tails de l'artiste ID: $artistId")
        
        try {
            val result = getArtistDetailsUseCase(artistId)
            result.fold(
                onSuccess = { artistDetails ->
                    _uiState.value = DetailsUiState.withArtist(artistDetails.artist)
                    Timber.i("‚úÖ D√©tails de l'artiste '${artistDetails.artist.name}' charg√©s avec succ√®s")
                },
                onFailure = { exception ->
                    Timber.e(exception, "üí• Erreur lors du chargement de l'artiste $artistId")
                    throw exception
                }
            )
            
        } catch (exception: Exception) {
            Timber.e(exception, "üí• Erreur lors du chargement de l'artiste $artistId")
            throw exception
        }
    }
    
    /**
     * Charge les d√©tails d'un album depuis l'API Deezer
     * 
     * Utilise le repository pour r√©cup√©rer les vraies donn√©es de l'album
     * 
     * @param albumId Identifiant de l'album
     */
    private suspend fun loadAlbumDetails(albumId: Long) {
        Timber.d("üíø Chargement des d√©tails de l'album ID: $albumId")
        
        try {
            val result = musicRepository.getAlbumById(albumId)
            result.fold(
                onSuccess = { album ->
                    _uiState.value = DetailsUiState.withAlbum(album)
                    Timber.i("‚úÖ D√©tails de l'album '${album.title}' charg√©s avec succ√®s")
                },
                onFailure = { exception ->
                    Timber.e(exception, "üí• Erreur lors du chargement de l'album $albumId")
                    throw exception
                }
            )
            
        } catch (exception: Exception) {
            Timber.e(exception, "üí• Erreur lors du chargement de l'album $albumId")
            throw exception
        }
    }
    
    /**
     * Charge les d√©tails d'une piste depuis l'API Deezer
     * 
     * Utilise le repository pour r√©cup√©rer les vraies donn√©es de la piste
     * 
     * @param trackId Identifiant de la piste
     */
    private suspend fun loadTrackDetails(trackId: Long) {
        Timber.d("üéµ Chargement des d√©tails de la piste ID: $trackId")
        
        try {
            val result = musicRepository.getTrackById(trackId)
            result.fold(
                onSuccess = { track ->
                    _uiState.value = DetailsUiState.withTrack(track)
                    Timber.i("‚úÖ D√©tails de la piste '${track.title}' charg√©s avec succ√®s")
                },
                onFailure = { exception ->
                    Timber.e(exception, "üí• Erreur lors du chargement de la piste $trackId")
                    throw exception
                }
            )
            
        } catch (exception: Exception) {
            Timber.e(exception, "üí• Erreur lors du chargement de la piste $trackId")
            throw exception
        }
    }
    
    // ================================
    // GESTION D'ERREURS
    // ================================
    
    /**
     * G√®re les erreurs et met √† jour l'√©tat d'UI appropri√©
     * 
     * Applique le principe de responsabilit√© unique en centralisant
     * la logique de gestion d'erreurs
     * 
     * @param exception Exception √† traiter
     */
    private fun handleError(exception: Exception) {
        val errorMessage = when (exception) {
            is java.net.UnknownHostException -> "V√©rifiez votre connexion internet"
            is java.net.SocketTimeoutException -> "Le serveur met trop de temps √† r√©pondre"
            is retrofit2.HttpException -> {
                when (exception.code()) {
                    404 -> "√âl√©ment introuvable"
                    401 -> "Acc√®s non autoris√©"
                    500 -> "Erreur du serveur"
                    else -> "Erreur HTTP ${exception.code()}"
                }
            }
            else -> "Une erreur inattendue est survenue"
        }
        
        _uiState.value = DetailsUiState.error(errorMessage)
        Timber.e("üî¥ Erreur trait√©e : $errorMessage")
    }
    
    // ================================
    // M√âTHODES UTILITAIRES
    // ================================
    

    
    override fun onCleared() {
        super.onCleared()
        Timber.d("üóëÔ∏è DetailsViewModel nettoy√©")
    }
}
